<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jogo de Plataforma 2D</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #87CEEB, #98FB98);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            font-family: 'Courier New', monospace;
        }
        canvas {
            border: 4px solid #8B4513;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.3);
        }
        .controls {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(255,255,255,0.9);
            padding: 10px;
            border-radius: 5px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="controls">
        <strong>Controles:</strong><br>
        A/D ou ←/→ - Mover<br>
        W ou ↑ ou ESPAÇO - Pular<br>
        R - Reiniciar
    </div>

    <script>
        let player;
        let platforms = [];
        let coins = [];
        let enemies = [];
        let camera = { x: 0, y: 0 };
        let score = 0;
        let gameOver = false;
        let victory = false;
        
        // Controles na tela
        let touchControls = {
            leftBtn: { x: 50, y: 0, w: 80, h: 80, pressed: false },
            rightBtn: { x: 150, y: 0, w: 80, h: 80, pressed: false },
            jumpBtn: { x: 0, y: 0, w: 100, h: 80, pressed: false },
            restartBtn: { x: 0, y: 0, w: 120, h: 50, pressed: false }
        };
        
        let keys = {
            left: false,
            right: false,
            jump: false
        };
        
        // Cores
        const COLORS = {
            sky: '#87CEEB',
            ground: '#8B4513',
            grass: '#32CD32',
            player: '#FF0000',
            platform: '#8B4513',
            coin: '#FFD700',
            enemy: '#800080'
        };

        function setup() {
            createCanvas(800, 600);
            initializeGame();
            
            // Posicionar controles na tela
            touchControls.leftBtn.y = height - 100;
            touchControls.rightBtn.y = height - 100;
            touchControls.jumpBtn.x = width - 120;
            touchControls.jumpBtn.y = height - 100;
            touchControls.restartBtn.x = width/2 - 60;
            touchControls.restartBtn.y = height/2 + 100;
        }

        function initializeGame() {
            // Criar jogador
            player = {
                x: 100,
                y: 400,
                w: 30,
                h: 40,
                vx: 0,
                vy: 0,
                onGround: false,
                speed: 5,
                jumpPower: 12
            };

            // Limpar arrays
            platforms = [];
            coins = [];
            enemies = [];
            
            // Criar plataformas
            createPlatforms();
            
            // Criar moedas
            createCoins();
            
            // Criar inimigos
            createEnemies();
            
            // Reset do jogo
            score = 0;
            gameOver = false;
            victory = false;
            camera.x = 0;
            camera.y = 0;
        }

        function createPlatforms() {
            // Chão inicial
            platforms.push({ x: 0, y: 550, w: 400, h: 50, type: 'ground' });
            
            // Plataformas do nível (maiores)
            platforms.push({ x: 450, y: 450, w: 200, h: 30, type: 'platform' });
            platforms.push({ x: 750, y: 350, w: 180, h: 30, type: 'platform' });
            platforms.push({ x: 1050, y: 400, w: 220, h: 30, type: 'platform' });
            platforms.push({ x: 1400, y: 280, w: 180, h: 30, type: 'platform' });
            platforms.push({ x: 1700, y: 380, w: 200, h: 30, type: 'platform' });
            platforms.push({ x: 2000, y: 200, w: 180, h: 30, type: 'platform' });
            platforms.push({ x: 2300, y: 450, w: 250, h: 30, type: 'platform' });
            platforms.push({ x: 2650, y: 320, w: 200, h: 30, type: 'platform' });
            
            // Chão final
            platforms.push({ x: 2900, y: 550, w: 400, h: 50, type: 'ground' });
        }

        function createCoins() {
            // Moedas espalhadas pelo nível
            coins.push({ x: 520, y: 400, collected: false });
            coins.push({ x: 550, y: 400, collected: false });
            coins.push({ x: 580, y: 400, collected: false });
            coins.push({ x: 820, y: 300, collected: false });
            coins.push({ x: 850, y: 300, collected: false });
            coins.push({ x: 1150, y: 350, collected: false });
            coins.push({ x: 1180, y: 350, collected: false });
            coins.push({ x: 1480, y: 230, collected: false });
            coins.push({ x: 1510, y: 230, collected: false });
            coins.push({ x: 1780, y: 330, collected: false });
            coins.push({ x: 2080, y: 150, collected: false });
            coins.push({ x: 2110, y: 150, collected: false });
            coins.push({ x: 2400, y: 400, collected: false });
            coins.push({ x: 2430, y: 400, collected: false });
            coins.push({ x: 2460, y: 400, collected: false });
            coins.push({ x: 2730, y: 270, collected: false });
        }

        function createEnemies() {
            enemies.push({ 
                x: 500, y: 415, w: 25, h: 25, 
                vx: -1.5, dir: -1, 
                platform: { x: 450, w: 200 },
                type: 'patrol'
            });
            enemies.push({ 
                x: 800, y: 315, w: 25, h: 25, 
                vx: 1.2, dir: 1, 
                platform: { x: 750, w: 180 },
                type: 'patrol'
            });
            enemies.push({ 
                x: 1200, y: 365, w: 25, h: 25, 
                vx: -1.8, dir: -1, 
                platform: { x: 1050, w: 220 },
                type: 'patrol'
            });
            enemies.push({ 
                x: 1450, y: 245, w: 25, h: 25, 
                vx: 1.3, dir: 1, 
                platform: { x: 1400, w: 180 },
                type: 'patrol'
            });
            enemies.push({ 
                x: 1750, y: 345, w: 25, h: 25, 
                vx: -1.6, dir: -1, 
                platform: { x: 1700, w: 200 },
                type: 'patrol'
            });
            enemies.push({ 
                x: 2450, y: 415, w: 25, h: 25, 
                vx: 1.4, dir: 1, 
                platform: { x: 2300, w: 250 },
                type: 'patrol'
            });
        }

        function draw() {
            // Fundo gradiente
            drawBackground();
            
            // Atualizar câmera para seguir o jogador
            updateCamera();
            
            // Aplicar transformação da câmera
            push();
            translate(-camera.x, -camera.y);
            
            if (!gameOver && !victory) {
                updatePlayer();
                updateEnemies();
                checkCollisions();
                checkWinCondition();
            }
            
            // Desenhar elementos do jogo
            drawPlatforms();
            drawCoins();
            drawEnemies();
            drawPlayer();
            
            pop();
            
            // Interface do usuário (sem transformação da câmera)
            drawUI();
            drawTouchControls();
            
            // Telas de game over ou vitória
            if (gameOver) {
                drawGameOverScreen();
            } else if (victory) {
                drawVictoryScreen();
            }
        }

        function drawBackground() {
            // Céu gradiente
            for (let i = 0; i <= height; i++) {
                let inter = map(i, 0, height, 0, 1);
                let c = lerpColor(color(135, 206, 250), color(255, 165, 0), inter);
                stroke(c);
                line(0, i, width, i);
            }
            
            // Desenhar cidade no fundo
            drawCityscape();
            
            // Nuvens
            fill(255, 255, 255, 180);
            noStroke();
            ellipse(200 - camera.x * 0.1, 80, 60, 40);
            ellipse(220 - camera.x * 0.1, 80, 80, 50);
            ellipse(240 - camera.x * 0.1, 80, 60, 40);
            
            ellipse(600 - camera.x * 0.08, 60, 50, 30);
            ellipse(620 - camera.x * 0.08, 60, 70, 40);
            
            ellipse(1000 - camera.x * 0.12, 100, 55, 35);
            ellipse(1020 - camera.x * 0.12, 100, 75, 45);
            
            ellipse(1400 - camera.x * 0.09, 70, 65, 45);
            ellipse(1420 - camera.x * 0.09, 70, 85, 55);
        }
        
        function drawCityscape() {
            // Prédios no fundo (parallax)
            let buildings = [
                { x: 100, w: 80, h: 200, color: [70, 70, 90] },
                { x: 200, w: 60, h: 150, color: [80, 80, 100] },
                { x: 280, w: 100, h: 250, color: [60, 60, 80] },
                { x: 400, w: 70, h: 180, color: [75, 75, 95] },
                { x: 500, w: 90, h: 220, color: [65, 65, 85] },
                { x: 620, w: 75, h: 160, color: [85, 85, 105] },
                { x: 720, w: 85, h: 200, color: [70, 70, 90] },
                { x: 830, w: 95, h: 240, color: [60, 60, 80] },
                { x: 950, w: 65, h: 170, color: [80, 80, 100] },
                { x: 1040, w: 110, h: 280, color: [55, 55, 75] },
                { x: 1180, w: 70, h: 190, color: [75, 75, 95] },
                { x: 1280, w: 80, h: 210, color: [65, 65, 85] },
                { x: 1400, w: 90, h: 160, color: [85, 85, 105] },
                { x: 1520, w: 100, h: 250, color: [60, 60, 80] },
                { x: 1650, w: 75, h: 180, color: [70, 70, 90] },
                { x: 1750, w: 85, h: 220, color: [80, 80, 100] },
                { x: 1860, w: 95, h: 190, color: [65, 65, 85] },
                { x: 1980, w: 110, h: 270, color: [55, 55, 75] },
                { x: 2120, w: 70, h: 150, color: [85, 85, 105] },
                { x: 2220, w: 80, h: 200, color: [75, 75, 95] },
                { x: 2330, w: 90, h: 240, color: [60, 60, 80] },
                { x: 2450, w: 100, h: 180, color: [70, 70, 90] },
                { x: 2580, w: 85, h: 210, color: [80, 80, 100] },
                { x: 2690, w: 95, h: 260, color: [65, 65, 85] }
            ];
            
            for (let building of buildings) {
                let offsetX = camera.x * 0.3; // Efeito parallax
                let buildingX = building.x - offsetX;
                let buildingY = height - building.h - 50;
                
                // Sombra do prédio
                fill(0, 0, 0, 30);
                noStroke();
                rect(buildingX + 5, buildingY + 5, building.w, building.h);
                
                // Prédio
                fill(building.color[0], building.color[1], building.color[2]);
                stroke(building.color[0] - 20, building.color[1] - 20, building.color[2] - 20);
                strokeWeight(1);
                rect(buildingX, buildingY, building.w, building.h);
                
                // Janelas do prédio
                fill(255, 255, 0, 150);
                noStroke();
                for (let i = 0; i < building.h - 20; i += 25) {
                    for (let j = 0; j < building.w - 15; j += 20) {
                        if (random() > 0.6) { // Nem todas as janelas estão acesas
                            rect(buildingX + j + 8, buildingY + i + 10, 8, 12);
                        }
                    }
                }
                
                // Antena no topo de alguns prédios
                if (random() > 0.7) {
                    stroke(100, 100, 100);
                    strokeWeight(2);
                    line(buildingX + building.w/2, buildingY, buildingX + building.w/2, buildingY - 15);
                    fill(255, 0, 0);
                    noStroke();
                    ellipse(buildingX + building.w/2, buildingY - 15, 4);
                }
            }
        }

        function updateCamera() {
            // Câmera segue o jogador com margem
            let targetX = player.x - width / 2;
            let targetY = player.y - height / 2;
            
            // Suavizar movimento da câmera
            camera.x = lerp(camera.x, targetX, 0.05);
            camera.y = lerp(camera.y, targetY, 0.05);
            
            // Limitar câmera para não mostrar além do nível
            camera.x = constrain(camera.x, 0, 3300 - width);
            camera.y = constrain(camera.y, -200, 100);
        }

        function updatePlayer() {
            // Controles unificados (teclado + touch)
            if ((keyIsDown(65) || keyIsDown(LEFT_ARROW)) || keys.left) { // A ou seta esquerda ou botão esquerda
                player.vx = -player.speed;
            } else if ((keyIsDown(68) || keyIsDown(RIGHT_ARROW)) || keys.right) { // D ou seta direita ou botão direita
                player.vx = player.speed;
            } else {
                player.vx *= 0.8; // Fricção
            }
            
            if (((keyIsDown(87) || keyIsDown(UP_ARROW) || keyIsDown(32)) || keys.jump) && player.onGround) { // W, seta cima, espaço ou botão pulo
                player.vy = -player.jumpPower;
                player.onGround = false;
            }
            
            // Gravidade
            player.vy += 0.6;
            
            // Limitar velocidade vertical
            player.vy = constrain(player.vy, -15, 15);
            
            // Aplicar velocidade
            player.x += player.vx;
            player.y += player.vy;
            
            // Verificar se caiu do mapa
            if (player.y > 700) {
                gameOver = true;
            }
        }

        function updateEnemies() {
            for (let enemy of enemies) {
                if (enemy.x > -50) { // Só atualiza se não foi derrotado
                    enemy.x += enemy.vx;
                    
                    // Sistema de patrulha melhorado
                    if (enemy.type === 'patrol' && enemy.platform) {
                        // Verificar limites da plataforma
                        if (enemy.x <= enemy.platform.x + 10) {
                            enemy.vx = Math.abs(enemy.vx); // Mover para direita
                            enemy.dir = 1;
                        } else if (enemy.x + enemy.w >= enemy.platform.x + enemy.platform.w - 10) {
                            enemy.vx = -Math.abs(enemy.vx); // Mover para esquerda
                            enemy.dir = -1;
                        }
                    }
                    
                    // Movimento mais suave com pequena variação
                    enemy.x += Math.sin(frameCount * 0.02 + enemy.x * 0.001) * 0.3;
                }
            }
        }

        function checkCollisions() {
            player.onGround = false;
            
            // Colisão com plataformas
            for (let platform of platforms) {
                if (player.x < platform.x + platform.w &&
                    player.x + player.w > platform.x &&
                    player.y < platform.y + platform.h &&
                    player.y + player.h > platform.y) {
                    
                    // Colisão por cima (jogador pousando)
                    if (player.vy > 0 && player.y < platform.y) {
                        player.y = platform.y - player.h;
                        player.vy = 0;
                        player.onGround = true;
                    }
                    // Colisão por baixo
                    else if (player.vy < 0 && player.y > platform.y) {
                        player.y = platform.y + platform.h;
                        player.vy = 0;
                    }
                    // Colisão lateral
                    else {
                        if (player.x < platform.x) {
                            player.x = platform.x - player.w;
                        } else {
                            player.x = platform.x + platform.w;
                        }
                        player.vx = 0;
                    }
                }
            }
            
            // Colisão com moedas
            for (let coin of coins) {
                if (!coin.collected &&
                    player.x < coin.x + 20 &&
                    player.x + player.w > coin.x &&
                    player.y < coin.y + 20 &&
                    player.y + player.h > coin.y) {
                    coin.collected = true;
                    score += 10;
                }
            }
            
            // Colisão com inimigos
            for (let enemy of enemies) {
                if (player.x < enemy.x + enemy.w &&
                    player.x + player.w > enemy.x &&
                    player.y < enemy.y + enemy.h &&
                    player.y + player.h > enemy.y) {
                    
                    // Se jogador está caindo em cima do inimigo
                    if (player.vy > 0 && player.y < enemy.y) {
                        enemy.x = -100; // Remove inimigo
                        player.vy = -8; // Pequeno pulo
                        score += 20;
                    } else {
                        gameOver = true;
                    }
                }
            }
        }

        function checkWinCondition() {
            // Vitória ao chegar no final do nível
            if (player.x > 3200) {
                victory = true;
            }
        }

        function drawPlayer() {
            push();
            fill(COLORS.player);
            stroke(139, 0, 0);
            strokeWeight(2);
            
            // Corpo do jogador (retângulo com cantos arredondados)
            rect(player.x, player.y, player.w, player.h, 5);
            
            // Olhos
            fill(255);
            noStroke();
            ellipse(player.x + 8, player.y + 10, 6);
            ellipse(player.x + 22, player.y + 10, 6);
            
            fill(0);
            ellipse(player.x + 8, player.y + 10, 3);
            ellipse(player.x + 22, player.y + 10, 3);
            
            // Bigode
            stroke(139, 69, 19);
            strokeWeight(3);
            line(player.x + 10, player.y + 20, player.x + 20, player.y + 20);
            
            pop();
        }

        function drawPlatforms() {
            for (let platform of platforms) {
                // Sombra
                fill(0, 0, 0, 50);
                noStroke();
                rect(platform.x + 3, platform.y + 3, platform.w, platform.h, 5);
                
                // Plataforma
                if (platform.type === 'ground') {
                    fill(COLORS.ground);
                    stroke(101, 67, 33);
                } else {
                    fill(160, 82, 45);
                    stroke(139, 69, 19);
                }
                
                strokeWeight(2);
                rect(platform.x, platform.y, platform.w, platform.h, 5);
                
                // Textura de grama no topo das plataformas ground
                if (platform.type === 'ground') {
                    fill(COLORS.grass);
                    noStroke();
                    rect(platform.x, platform.y - 5, platform.w, 5);
                    
                    // Pequenos detalhes de grama
                    for (let i = 0; i < platform.w; i += 20) {
                        stroke(34, 139, 34);
                        strokeWeight(2);
                        line(platform.x + i, platform.y - 5, platform.x + i, platform.y - 10);
                        line(platform.x + i + 5, platform.y - 5, platform.x + i + 5, platform.y - 8);
                        line(platform.x + i + 10, platform.y - 5, platform.x + i + 10, platform.y - 12);
                    }
                }
            }
        }

        function drawCoins() {
            for (let coin of coins) {
                if (!coin.collected) {
                    push();
                    
                    // Animação de rotação
                    translate(coin.x + 10, coin.y + 10);
                    rotate(frameCount * 0.1);
                    
                    // Sombra
                    fill(0, 0, 0, 50);
                    noStroke();
                    ellipse(2, 2, 18);
                    
                    // Moeda
                    fill(COLORS.coin);
                    stroke(218, 165, 32);
                    strokeWeight(2);
                    ellipse(0, 0, 18);
                    
                    // Símbolo da moeda
                    fill(255, 215, 0);
                    noStroke();
                    textAlign(CENTER, CENTER);
                    textSize(10);
                    textStyle(BOLD);
                    text('$', 0, 0);
                    
                    pop();
                }
            }
        }

        function drawEnemies() {
            for (let enemy of enemies) {
                if (enemy.x > -50) { // Só desenha se não foi derrotado
                    push();
                    
                    // Sombra
                    fill(0, 0, 0, 50);
                    noStroke();
                    ellipse(enemy.x + enemy.w/2 + 2, enemy.y + enemy.h + 2, enemy.w);
                    
                    // Corpo do inimigo com animação
                    let bounce = sin(frameCount * 0.1 + enemy.x * 0.05) * 2;
                    
                    fill(COLORS.enemy);
                    stroke(75, 0, 130);
                    strokeWeight(2);
                    ellipse(enemy.x + enemy.w/2, enemy.y + enemy.h/2 + bounce, enemy.w, enemy.h);
                    
                    // Olhos malvados que seguem a direção
                    fill(255, 0, 0);
                    noStroke();
                    let eyeOffset = enemy.dir * 2;
                    ellipse(enemy.x + 8 + eyeOffset, enemy.y + 8 + bounce, 4);
                    ellipse(enemy.x + 17 + eyeOffset, enemy.y + 8 + bounce, 4);
                    
                    // Dentes
                    fill(255);
                    triangle(enemy.x + 8, enemy.y + 15 + bounce, enemy.x + 10, enemy.y + 18 + bounce, enemy.x + 12, enemy.y + 15 + bounce);
                    triangle(enemy.x + 13, enemy.y + 15 + bounce, enemy.x + 15, enemy.y + 18 + bounce, enemy.x + 17, enemy.y + 15 + bounce);
                    
                    // Indicador de direção (pequenas linhas de movimento)
                    stroke(128, 0, 128, 100);
                    strokeWeight(1);
                    for (let i = 0; i < 3; i++) {
                        line(enemy.x - enemy.dir * (10 + i * 5), enemy.y + 10 + i * 3 + bounce, 
                             enemy.x - enemy.dir * (5 + i * 5), enemy.y + 10 + i * 3 + bounce);
                    }
                    
                    pop();
                }
            }
        }

        function drawUI() {
            // Painel de pontuação
            fill(0, 0, 0, 150);
            noStroke();
            rect(10, 10, 200, 50, 10);
            
            fill(255);
            textAlign(LEFT, TOP);
            textSize(16);
            textStyle(BOLD);
            text(`Pontuação: ${score}`, 20, 25);
            text(`Moedas: ${coins.filter(c => c.collected).length}/${coins.length}`, 20, 45);
        }

        function drawGameOverScreen() {
            fill(0, 0, 0, 200);
            noStroke();
            rect(0, 0, width, height);
            
            fill(255, 0, 0);
            textAlign(CENTER, CENTER);
            textSize(48);
            textStyle(BOLD);
            text('GAME OVER', width/2, height/2 - 80);
            
            fill(255);
            textSize(20);
            text(`Pontuação Final: ${score}`, width/2, height/2 - 30);
            text('Pressione R ou toque no botão para reiniciar', width/2, height/2 + 30);
        }

        function drawTouchControls() {
            // Botão Esquerda
            drawButton(touchControls.leftBtn, "◀", touchControls.leftBtn.pressed);
            
            // Botão Direita
            drawButton(touchControls.rightBtn, "▶", touchControls.rightBtn.pressed);
            
            // Botão Pulo
            drawButton(touchControls.jumpBtn, "⬆", touchControls.jumpBtn.pressed);
            
            // Botão Restart (só aparece em game over ou vitória)
            if (gameOver || victory) {
                drawButton(touchControls.restartBtn, "🔄", touchControls.restartBtn.pressed);
            }
        }
        
        function drawButton(btn, label, pressed) {
            push();
            
            // Sombra
            fill(0, 0, 0, 100);
            noStroke();
            ellipse(btn.x + btn.w/2 + 3, btn.y + btn.h/2 + 3, btn.w, btn.h);
            
            // Botão
            if (pressed) {
                fill(100, 150, 255, 200);
                stroke(50, 100, 200);
            } else {
                fill(255, 255, 255, 150);
                stroke(200, 200, 200);
            }
            strokeWeight(3);
            ellipse(btn.x + btn.w/2, btn.y + btn.h/2, btn.w, btn.h);
            
            // Texto/Ícone
            fill(pressed ? 255 : 100);
            noStroke();
            textAlign(CENTER, CENTER);
            textSize(pressed ? 28 : 24);
            textStyle(BOLD);
            text(label, btn.x + btn.w/2, btn.y + btn.h/2);
            
            pop();
        }

        function keyPressed() {
            if (key === 'r' || key === 'R') {
                initializeGame();
            }
        }
    </script>
</body>
</html>
